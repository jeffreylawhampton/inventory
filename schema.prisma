// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL")
//   directUrl = env("POSTGRES_URL_NON_POOLING")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  image      String?
  createdAt  DateTime    @default(now())
  items      Item[]
  categories Category[]
  locations  Location[]
  containers Container[]
  colors     Color[]
}

model Location {
  id               Int         @id @default(autoincrement())
  createdAt        DateTime    @default(now())
  name             String
  user             User        @relation(fields: [userId], references: [id])
  userId           Int
  items            Item[]
  containers       Container[]
  parentLocationId Int?        @map("locationId")
  parentLocation   Location?   @relation("Nesting", fields: [parentLocationId], references: [id])
  locations        Location[]  @relation("Nesting")

  @@unique([userId, name])
}

model Container {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  name              String
  user              User        @relation(fields: [userId], references: [id])
  userId            Int
  items             Item[]
  level             Int?
  color             Color?      @relation(fields: [colorId], references: [id])
  colorId           Int?  
  locationId        Int?        @map("locationId")
  location          Location?   @relation(fields: [locationId], references: [id])
  containers        Container[] @relation("Nesting")
  parentContainerId Int?        @map("containerId")
  parentContainer   Container?  @relation("Nesting", fields: [parentContainerId], references: [id])

  @@unique([userId, name])

}

model Image {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  alt          String?
  caption      String?
  url          String?
  assetId      String?
  format       String?
  width        Int?
  height       Int?
  path         String?
  publicId     String?
  secureUrl    String?
  thumbnailUrl String?
  featured     Boolean?
  item         Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId       Int

  @@unique([itemId, url])
}

model Item {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  name         String
  description  String?
  value        String?
  serialNumber String?
  quantity     String?
  purchasedAt  String?
  images       Image[]
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  categories   Category[]
  location     Location?  @relation(fields: [locationId], references: [id])
  locationId   Int?
  container    Container? @relation(fields: [containerId], references: [id])
  containerId  Int?

  @@unique([userId, name])
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  color      Color?     @relation(fields: [colorId], references: [id])
  colorId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  items     Item[]

  @@unique([userId, name])
}

model Color {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  hex       String
  user             User        @relation(fields: [userId], references: [id])
  userId           Int
  Container Container[]
  Category  Category[]

  @@unique([userId, hex])
}
